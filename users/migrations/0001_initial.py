# Generated by Django 4.2.7 on 2025-09-30 00:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('menu', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MealHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(default=1.0, help_text='Number of servings')),
                ('eaten_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('daily_menu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meal_history', to='menu.dailymenu')),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_meals', to='menu.dish')),
            ],
            options={
                'verbose_name_plural': 'Meal Histories',
                'ordering': ['-eaten_at'],
            },
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('explanation', models.TextField(blank=True, help_text='AI-generated explanation of the meal plan')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved by User'), ('modified', 'Modified by User'), ('rejected', 'Rejected by User'), ('completed', 'Meal Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When the plan was sent to user', null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('daily_menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to='menu.dailymenu')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_chat_id', models.BigIntegerField(blank=True, db_index=True, null=True, unique=True)),
                ('telegram_username', models.CharField(blank=True, max_length=255)),
                ('target_calories', models.FloatField(default=2000.0, help_text='Target daily calories')),
                ('target_protein', models.FloatField(default=50.0, help_text='Target protein in grams')),
                ('target_carbs', models.FloatField(default=250.0, help_text='Target carbs in grams')),
                ('target_fat', models.FloatField(default=70.0, help_text='Target fat in grams')),
                ('target_fiber', models.FloatField(default=25.0, help_text='Target fiber in grams')),
                ('max_sodium', models.FloatField(default=2300.0, help_text='Max sodium in mg')),
                ('max_added_sugars', models.FloatField(default=50.0, help_text='Max added sugars in grams')),
                ('dietary_restrictions', models.TextField(blank=True, help_text="Dietary restrictions (e.g., 'vegetarian', 'gluten-free', 'no pork')")),
                ('food_preferences', models.TextField(blank=True, help_text='Food preferences and dislikes')),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('breakfast_notification', models.BooleanField(default=True)),
                ('lunch_notification', models.BooleanField(default=True)),
                ('dinner_notification', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(-2, 'Never again'), (-1, 'Bad but edible'), (0, 'Neutral'), (1, 'Good'), (2, 'Love it')], db_index=True)),
                ('comment', models.TextField(blank=True, help_text='Free-form feedback from user')),
                ('feedback_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='menu.dish')),
                ('meal_history', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback', to='users.mealhistory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Feedback',
                'ordering': ['-feedback_date'],
            },
        ),
        migrations.CreateModel(
            name='MealPlanDish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(default=1.0, help_text='Number of servings')),
                ('dish', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.dish')),
                ('meal_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.mealplan')),
            ],
            options={
                'unique_together': {('meal_plan', 'dish')},
            },
        ),
        migrations.AddField(
            model_name='mealplan',
            name='dishes',
            field=models.ManyToManyField(through='users.MealPlanDish', to='menu.dish'),
        ),
        migrations.AddField(
            model_name='mealplan',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mealhistory',
            name='meal_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meal_history', to='users.mealplan'),
        ),
        migrations.AddField(
            model_name='mealhistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_history', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='mealplan',
            unique_together={('user', 'daily_menu')},
        ),
    ]
